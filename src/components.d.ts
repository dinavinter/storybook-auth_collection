/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { StateMachine } from "xstate/lib/types";
import { AuthRequest } from "./components/auth-machine/macines/auth_types";
import { GigyaConfig } from "./components/store/gigya-config-store";
import { LoginService } from "./components/gigya-login/machine";
import { MachineState, Renderer, ServiceCallback } from "./components/xstate-service/xstate";
import { InteractionMachineContext, InteractionMachineEvent } from "./components/interaction-machine/machine";
import { Interpreter, ServiceConfig } from "xstate";
import { SubscriptionMachineContext } from "./components/auth-machine/macines/subscribtion";
export namespace Components {
    interface AnyMachine {
        "machine": StateMachine<any, any, any, any>;
    }
    interface AuthMachine {
        "event": MessageEvent;
        "request": AuthRequest;
    }
    interface GigyaConfiguration {
        "apiKey": string;
        "domain": string;
    }
    interface GigyaLogin {
        "login": LoginService;
        "screen_set": string;
        "start_screen": string;
    }
    interface GigyaReauth {
    }
    interface GigyaScreen {
        "screen_set": string;
        "start_screen": string;
    }
    interface GigyaScreenContainer {
    }
    interface GigyaScreenPopover {
    }
    interface GigyaScreenRouter {
    }
    interface GigyaSdkStore {
        "apiKey": string;
        "domain": string;
    }
    interface GigyaStore {
        "apiKey": string;
        "domain": string;
    }
    interface InteractionMachine {
        "interaction": string;
        "loadService"?: ( service:ServiceConfig<any>) => void;
        "service": Interpreter<InteractionMachineContext, any, any, any>;
        "state": MachineState<InteractionMachineContext, InteractionMachineEvent>;
    }
    interface LoginMachine {
        "login": Interpreter<InteractionMachineContext, any, any, any>;
        "service": Interpreter<InteractionMachineContext, any, any, any>;
    }
    interface MachineConsumer {
        "service": Interpreter<any, any, any, any>;
    }
    interface MachineContextConsumer {
    }
    interface PureBase {
    }
    interface PureButton {
        /**
          * HTML element to use as basis
         */
        "as": string;
        /**
          * Background color
         */
        "color": string;
        /**
          * Is disabled?
         */
        "disabled": boolean;
        /**
          * Displays button as link
         */
        "href": string | undefined;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * The button or input type (usually submit)
         */
        "type": "submit" | "reset" | "button";
        /**
          * Optional prop for input to show text
         */
        "value": string;
    }
    interface RouterLink {
    }
    interface StepperMachine {
    }
    interface SubscriptionMachine {
        "context": SubscriptionMachineContext;
    }
    interface XstateService {
        "callback"?: ServiceCallback;
        /**
          * Renderer callback
         */
        "renderer"?: Renderer<any>;
        /**
          * An XState service.
         */
        "service": Interpreter<any>;
    }
    interface XstateViz {
    }
}
declare global {
    interface HTMLAnyMachineElement extends Components.AnyMachine, HTMLStencilElement {
    }
    var HTMLAnyMachineElement: {
        prototype: HTMLAnyMachineElement;
        new (): HTMLAnyMachineElement;
    };
    interface HTMLAuthMachineElement extends Components.AuthMachine, HTMLStencilElement {
    }
    var HTMLAuthMachineElement: {
        prototype: HTMLAuthMachineElement;
        new (): HTMLAuthMachineElement;
    };
    interface HTMLGigyaConfigurationElement extends Components.GigyaConfiguration, HTMLStencilElement {
    }
    var HTMLGigyaConfigurationElement: {
        prototype: HTMLGigyaConfigurationElement;
        new (): HTMLGigyaConfigurationElement;
    };
    interface HTMLGigyaLoginElement extends Components.GigyaLogin, HTMLStencilElement {
    }
    var HTMLGigyaLoginElement: {
        prototype: HTMLGigyaLoginElement;
        new (): HTMLGigyaLoginElement;
    };
    interface HTMLGigyaReauthElement extends Components.GigyaReauth, HTMLStencilElement {
    }
    var HTMLGigyaReauthElement: {
        prototype: HTMLGigyaReauthElement;
        new (): HTMLGigyaReauthElement;
    };
    interface HTMLGigyaScreenElement extends Components.GigyaScreen, HTMLStencilElement {
    }
    var HTMLGigyaScreenElement: {
        prototype: HTMLGigyaScreenElement;
        new (): HTMLGigyaScreenElement;
    };
    interface HTMLGigyaScreenContainerElement extends Components.GigyaScreenContainer, HTMLStencilElement {
    }
    var HTMLGigyaScreenContainerElement: {
        prototype: HTMLGigyaScreenContainerElement;
        new (): HTMLGigyaScreenContainerElement;
    };
    interface HTMLGigyaScreenPopoverElement extends Components.GigyaScreenPopover, HTMLStencilElement {
    }
    var HTMLGigyaScreenPopoverElement: {
        prototype: HTMLGigyaScreenPopoverElement;
        new (): HTMLGigyaScreenPopoverElement;
    };
    interface HTMLGigyaScreenRouterElement extends Components.GigyaScreenRouter, HTMLStencilElement {
    }
    var HTMLGigyaScreenRouterElement: {
        prototype: HTMLGigyaScreenRouterElement;
        new (): HTMLGigyaScreenRouterElement;
    };
    interface HTMLGigyaSdkStoreElement extends Components.GigyaSdkStore, HTMLStencilElement {
    }
    var HTMLGigyaSdkStoreElement: {
        prototype: HTMLGigyaSdkStoreElement;
        new (): HTMLGigyaSdkStoreElement;
    };
    interface HTMLGigyaStoreElement extends Components.GigyaStore, HTMLStencilElement {
    }
    var HTMLGigyaStoreElement: {
        prototype: HTMLGigyaStoreElement;
        new (): HTMLGigyaStoreElement;
    };
    interface HTMLInteractionMachineElement extends Components.InteractionMachine, HTMLStencilElement {
    }
    var HTMLInteractionMachineElement: {
        prototype: HTMLInteractionMachineElement;
        new (): HTMLInteractionMachineElement;
    };
    interface HTMLLoginMachineElement extends Components.LoginMachine, HTMLStencilElement {
    }
    var HTMLLoginMachineElement: {
        prototype: HTMLLoginMachineElement;
        new (): HTMLLoginMachineElement;
    };
    interface HTMLMachineConsumerElement extends Components.MachineConsumer, HTMLStencilElement {
    }
    var HTMLMachineConsumerElement: {
        prototype: HTMLMachineConsumerElement;
        new (): HTMLMachineConsumerElement;
    };
    interface HTMLMachineContextConsumerElement extends Components.MachineContextConsumer, HTMLStencilElement {
    }
    var HTMLMachineContextConsumerElement: {
        prototype: HTMLMachineContextConsumerElement;
        new (): HTMLMachineContextConsumerElement;
    };
    interface HTMLPureBaseElement extends Components.PureBase, HTMLStencilElement {
    }
    var HTMLPureBaseElement: {
        prototype: HTMLPureBaseElement;
        new (): HTMLPureBaseElement;
    };
    interface HTMLPureButtonElement extends Components.PureButton, HTMLStencilElement {
    }
    var HTMLPureButtonElement: {
        prototype: HTMLPureButtonElement;
        new (): HTMLPureButtonElement;
    };
    interface HTMLRouterLinkElement extends Components.RouterLink, HTMLStencilElement {
    }
    var HTMLRouterLinkElement: {
        prototype: HTMLRouterLinkElement;
        new (): HTMLRouterLinkElement;
    };
    interface HTMLStepperMachineElement extends Components.StepperMachine, HTMLStencilElement {
    }
    var HTMLStepperMachineElement: {
        prototype: HTMLStepperMachineElement;
        new (): HTMLStepperMachineElement;
    };
    interface HTMLSubscriptionMachineElement extends Components.SubscriptionMachine, HTMLStencilElement {
    }
    var HTMLSubscriptionMachineElement: {
        prototype: HTMLSubscriptionMachineElement;
        new (): HTMLSubscriptionMachineElement;
    };
    interface HTMLXstateServiceElement extends Components.XstateService, HTMLStencilElement {
    }
    var HTMLXstateServiceElement: {
        prototype: HTMLXstateServiceElement;
        new (): HTMLXstateServiceElement;
    };
    interface HTMLXstateVizElement extends Components.XstateViz, HTMLStencilElement {
    }
    var HTMLXstateVizElement: {
        prototype: HTMLXstateVizElement;
        new (): HTMLXstateVizElement;
    };
    interface HTMLElementTagNameMap {
        "any-machine": HTMLAnyMachineElement;
        "auth-machine": HTMLAuthMachineElement;
        "gigya-configuration": HTMLGigyaConfigurationElement;
        "gigya-login": HTMLGigyaLoginElement;
        "gigya-reauth": HTMLGigyaReauthElement;
        "gigya-screen": HTMLGigyaScreenElement;
        "gigya-screen-container": HTMLGigyaScreenContainerElement;
        "gigya-screen-popover": HTMLGigyaScreenPopoverElement;
        "gigya-screen-router": HTMLGigyaScreenRouterElement;
        "gigya-sdk-store": HTMLGigyaSdkStoreElement;
        "gigya-store": HTMLGigyaStoreElement;
        "interaction-machine": HTMLInteractionMachineElement;
        "login-machine": HTMLLoginMachineElement;
        "machine-consumer": HTMLMachineConsumerElement;
        "machine-context-consumer": HTMLMachineContextConsumerElement;
        "pure-base": HTMLPureBaseElement;
        "pure-button": HTMLPureButtonElement;
        "router-link": HTMLRouterLinkElement;
        "stepper-machine": HTMLStepperMachineElement;
        "subscription-machine": HTMLSubscriptionMachineElement;
        "xstate-service": HTMLXstateServiceElement;
        "xstate-viz": HTMLXstateVizElement;
    }
}
declare namespace LocalJSX {
    interface AnyMachine {
        "machine"?: StateMachine<any, any, any, any>;
    }
    interface AuthMachine {
        "event"?: MessageEvent;
        "request"?: AuthRequest;
    }
    interface GigyaConfiguration {
        "apiKey"?: string;
        "domain"?: string;
        "onApplied"?: (event: CustomEvent<GigyaConfig>) => void;
    }
    interface GigyaLogin {
        "login"?: LoginService;
        "screen_set"?: string;
        "start_screen"?: string;
    }
    interface GigyaReauth {
    }
    interface GigyaScreen {
        "screen_set"?: string;
        "start_screen"?: string;
    }
    interface GigyaScreenContainer {
    }
    interface GigyaScreenPopover {
    }
    interface GigyaScreenRouter {
    }
    interface GigyaSdkStore {
        "apiKey"?: string;
        "domain"?: string;
    }
    interface GigyaStore {
        "apiKey"?: string;
        "domain"?: string;
    }
    interface InteractionMachine {
        "interaction"?: string;
        "loadService"?: ( service:ServiceConfig<any>) => void;
        "onResolve"?: (event: CustomEvent<any>) => void;
        "service"?: Interpreter<InteractionMachineContext, any, any, any>;
        "state"?: MachineState<InteractionMachineContext, InteractionMachineEvent>;
    }
    interface LoginMachine {
        "login"?: Interpreter<InteractionMachineContext, any, any, any>;
        "service"?: Interpreter<InteractionMachineContext, any, any, any>;
    }
    interface MachineConsumer {
        "service"?: Interpreter<any, any, any, any>;
    }
    interface MachineContextConsumer {
    }
    interface PureBase {
    }
    interface PureButton {
        /**
          * HTML element to use as basis
         */
        "as"?: string;
        /**
          * Background color
         */
        "color"?: string;
        /**
          * Is disabled?
         */
        "disabled"?: boolean;
        /**
          * Displays button as link
         */
        "href"?: string | undefined;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * The button or input type (usually submit)
         */
        "type"?: "submit" | "reset" | "button";
        /**
          * Optional prop for input to show text
         */
        "value"?: string;
    }
    interface RouterLink {
        "onBackgroundToggle"?: (event: CustomEvent<any>) => void;
    }
    interface StepperMachine {
    }
    interface SubscriptionMachine {
        "context"?: SubscriptionMachineContext;
    }
    interface XstateService {
        "callback"?: ServiceCallback;
        "onReady"?: (event: CustomEvent<Interpreter<any>>) => void;
        /**
          * Renderer callback
         */
        "renderer"?: Renderer<any>;
        /**
          * An XState service.
         */
        "service": Interpreter<any>;
    }
    interface XstateViz {
    }
    interface IntrinsicElements {
        "any-machine": AnyMachine;
        "auth-machine": AuthMachine;
        "gigya-configuration": GigyaConfiguration;
        "gigya-login": GigyaLogin;
        "gigya-reauth": GigyaReauth;
        "gigya-screen": GigyaScreen;
        "gigya-screen-container": GigyaScreenContainer;
        "gigya-screen-popover": GigyaScreenPopover;
        "gigya-screen-router": GigyaScreenRouter;
        "gigya-sdk-store": GigyaSdkStore;
        "gigya-store": GigyaStore;
        "interaction-machine": InteractionMachine;
        "login-machine": LoginMachine;
        "machine-consumer": MachineConsumer;
        "machine-context-consumer": MachineContextConsumer;
        "pure-base": PureBase;
        "pure-button": PureButton;
        "router-link": RouterLink;
        "stepper-machine": StepperMachine;
        "subscription-machine": SubscriptionMachine;
        "xstate-service": XstateService;
        "xstate-viz": XstateViz;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "any-machine": LocalJSX.AnyMachine & JSXBase.HTMLAttributes<HTMLAnyMachineElement>;
            "auth-machine": LocalJSX.AuthMachine & JSXBase.HTMLAttributes<HTMLAuthMachineElement>;
            "gigya-configuration": LocalJSX.GigyaConfiguration & JSXBase.HTMLAttributes<HTMLGigyaConfigurationElement>;
            "gigya-login": LocalJSX.GigyaLogin & JSXBase.HTMLAttributes<HTMLGigyaLoginElement>;
            "gigya-reauth": LocalJSX.GigyaReauth & JSXBase.HTMLAttributes<HTMLGigyaReauthElement>;
            "gigya-screen": LocalJSX.GigyaScreen & JSXBase.HTMLAttributes<HTMLGigyaScreenElement>;
            "gigya-screen-container": LocalJSX.GigyaScreenContainer & JSXBase.HTMLAttributes<HTMLGigyaScreenContainerElement>;
            "gigya-screen-popover": LocalJSX.GigyaScreenPopover & JSXBase.HTMLAttributes<HTMLGigyaScreenPopoverElement>;
            "gigya-screen-router": LocalJSX.GigyaScreenRouter & JSXBase.HTMLAttributes<HTMLGigyaScreenRouterElement>;
            "gigya-sdk-store": LocalJSX.GigyaSdkStore & JSXBase.HTMLAttributes<HTMLGigyaSdkStoreElement>;
            "gigya-store": LocalJSX.GigyaStore & JSXBase.HTMLAttributes<HTMLGigyaStoreElement>;
            "interaction-machine": LocalJSX.InteractionMachine & JSXBase.HTMLAttributes<HTMLInteractionMachineElement>;
            "login-machine": LocalJSX.LoginMachine & JSXBase.HTMLAttributes<HTMLLoginMachineElement>;
            "machine-consumer": LocalJSX.MachineConsumer & JSXBase.HTMLAttributes<HTMLMachineConsumerElement>;
            "machine-context-consumer": LocalJSX.MachineContextConsumer & JSXBase.HTMLAttributes<HTMLMachineContextConsumerElement>;
            "pure-base": LocalJSX.PureBase & JSXBase.HTMLAttributes<HTMLPureBaseElement>;
            "pure-button": LocalJSX.PureButton & JSXBase.HTMLAttributes<HTMLPureButtonElement>;
            "router-link": LocalJSX.RouterLink & JSXBase.HTMLAttributes<HTMLRouterLinkElement>;
            "stepper-machine": LocalJSX.StepperMachine & JSXBase.HTMLAttributes<HTMLStepperMachineElement>;
            "subscription-machine": LocalJSX.SubscriptionMachine & JSXBase.HTMLAttributes<HTMLSubscriptionMachineElement>;
            "xstate-service": LocalJSX.XstateService & JSXBase.HTMLAttributes<HTMLXstateServiceElement>;
            "xstate-viz": LocalJSX.XstateViz & JSXBase.HTMLAttributes<HTMLXstateVizElement>;
        }
    }
}
