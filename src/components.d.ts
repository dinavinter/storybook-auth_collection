/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { GigyaConfig } from "./components/store/gigya-config-store";
export namespace Components {
    interface AuthMachine {
    }
    interface GigyaConfiguration {
        "apiKey": string;
        "domain": string;
    }
    interface GigyaScreen {
        "screen_set": string;
        "start_screen": string;
    }
    interface GigyaScreenPopover {
    }
    interface GigyaScreenRouter {
    }
    interface GigyaSdkStore {
        "apiKey": string;
        "domain": string;
    }
    interface GigyaStore {
        "apiKey": string;
        "domain": string;
    }
    interface LoadingMachine {
    }
    interface PureBase {
    }
    interface PureButton {
        /**
          * HTML element to use as basis
         */
        "as": string;
        /**
          * Background color
         */
        "color": string;
        /**
          * Is disabled?
         */
        "disabled": boolean;
        /**
          * Displays button as link
         */
        "href": string | undefined;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * The button or input type (usually submit)
         */
        "type": "submit" | "reset" | "button";
        /**
          * Optional prop for input to show text
         */
        "value": string;
    }
    interface RouterLink {
    }
    interface StepperMachine {
    }
}
declare global {
    interface HTMLAuthMachineElement extends Components.AuthMachine, HTMLStencilElement {
    }
    var HTMLAuthMachineElement: {
        prototype: HTMLAuthMachineElement;
        new (): HTMLAuthMachineElement;
    };
    interface HTMLGigyaConfigurationElement extends Components.GigyaConfiguration, HTMLStencilElement {
    }
    var HTMLGigyaConfigurationElement: {
        prototype: HTMLGigyaConfigurationElement;
        new (): HTMLGigyaConfigurationElement;
    };
    interface HTMLGigyaScreenElement extends Components.GigyaScreen, HTMLStencilElement {
    }
    var HTMLGigyaScreenElement: {
        prototype: HTMLGigyaScreenElement;
        new (): HTMLGigyaScreenElement;
    };
    interface HTMLGigyaScreenPopoverElement extends Components.GigyaScreenPopover, HTMLStencilElement {
    }
    var HTMLGigyaScreenPopoverElement: {
        prototype: HTMLGigyaScreenPopoverElement;
        new (): HTMLGigyaScreenPopoverElement;
    };
    interface HTMLGigyaScreenRouterElement extends Components.GigyaScreenRouter, HTMLStencilElement {
    }
    var HTMLGigyaScreenRouterElement: {
        prototype: HTMLGigyaScreenRouterElement;
        new (): HTMLGigyaScreenRouterElement;
    };
    interface HTMLGigyaSdkStoreElement extends Components.GigyaSdkStore, HTMLStencilElement {
    }
    var HTMLGigyaSdkStoreElement: {
        prototype: HTMLGigyaSdkStoreElement;
        new (): HTMLGigyaSdkStoreElement;
    };
    interface HTMLGigyaStoreElement extends Components.GigyaStore, HTMLStencilElement {
    }
    var HTMLGigyaStoreElement: {
        prototype: HTMLGigyaStoreElement;
        new (): HTMLGigyaStoreElement;
    };
    interface HTMLLoadingMachineElement extends Components.LoadingMachine, HTMLStencilElement {
    }
    var HTMLLoadingMachineElement: {
        prototype: HTMLLoadingMachineElement;
        new (): HTMLLoadingMachineElement;
    };
    interface HTMLPureBaseElement extends Components.PureBase, HTMLStencilElement {
    }
    var HTMLPureBaseElement: {
        prototype: HTMLPureBaseElement;
        new (): HTMLPureBaseElement;
    };
    interface HTMLPureButtonElement extends Components.PureButton, HTMLStencilElement {
    }
    var HTMLPureButtonElement: {
        prototype: HTMLPureButtonElement;
        new (): HTMLPureButtonElement;
    };
    interface HTMLRouterLinkElement extends Components.RouterLink, HTMLStencilElement {
    }
    var HTMLRouterLinkElement: {
        prototype: HTMLRouterLinkElement;
        new (): HTMLRouterLinkElement;
    };
    interface HTMLStepperMachineElement extends Components.StepperMachine, HTMLStencilElement {
    }
    var HTMLStepperMachineElement: {
        prototype: HTMLStepperMachineElement;
        new (): HTMLStepperMachineElement;
    };
    interface HTMLElementTagNameMap {
        "auth-machine": HTMLAuthMachineElement;
        "gigya-configuration": HTMLGigyaConfigurationElement;
        "gigya-screen": HTMLGigyaScreenElement;
        "gigya-screen-popover": HTMLGigyaScreenPopoverElement;
        "gigya-screen-router": HTMLGigyaScreenRouterElement;
        "gigya-sdk-store": HTMLGigyaSdkStoreElement;
        "gigya-store": HTMLGigyaStoreElement;
        "loading-machine": HTMLLoadingMachineElement;
        "pure-base": HTMLPureBaseElement;
        "pure-button": HTMLPureButtonElement;
        "router-link": HTMLRouterLinkElement;
        "stepper-machine": HTMLStepperMachineElement;
    }
}
declare namespace LocalJSX {
    interface AuthMachine {
    }
    interface GigyaConfiguration {
        "apiKey"?: string;
        "domain"?: string;
        "onApplied"?: (event: CustomEvent<GigyaConfig>) => void;
    }
    interface GigyaScreen {
        "screen_set"?: string;
        "start_screen"?: string;
    }
    interface GigyaScreenPopover {
    }
    interface GigyaScreenRouter {
    }
    interface GigyaSdkStore {
        "apiKey"?: string;
        "domain"?: string;
    }
    interface GigyaStore {
        "apiKey"?: string;
        "domain"?: string;
    }
    interface LoadingMachine {
    }
    interface PureBase {
    }
    interface PureButton {
        /**
          * HTML element to use as basis
         */
        "as"?: string;
        /**
          * Background color
         */
        "color"?: string;
        /**
          * Is disabled?
         */
        "disabled"?: boolean;
        /**
          * Displays button as link
         */
        "href"?: string | undefined;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * The button or input type (usually submit)
         */
        "type"?: "submit" | "reset" | "button";
        /**
          * Optional prop for input to show text
         */
        "value"?: string;
    }
    interface RouterLink {
    }
    interface StepperMachine {
    }
    interface IntrinsicElements {
        "auth-machine": AuthMachine;
        "gigya-configuration": GigyaConfiguration;
        "gigya-screen": GigyaScreen;
        "gigya-screen-popover": GigyaScreenPopover;
        "gigya-screen-router": GigyaScreenRouter;
        "gigya-sdk-store": GigyaSdkStore;
        "gigya-store": GigyaStore;
        "loading-machine": LoadingMachine;
        "pure-base": PureBase;
        "pure-button": PureButton;
        "router-link": RouterLink;
        "stepper-machine": StepperMachine;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "auth-machine": LocalJSX.AuthMachine & JSXBase.HTMLAttributes<HTMLAuthMachineElement>;
            "gigya-configuration": LocalJSX.GigyaConfiguration & JSXBase.HTMLAttributes<HTMLGigyaConfigurationElement>;
            "gigya-screen": LocalJSX.GigyaScreen & JSXBase.HTMLAttributes<HTMLGigyaScreenElement>;
            "gigya-screen-popover": LocalJSX.GigyaScreenPopover & JSXBase.HTMLAttributes<HTMLGigyaScreenPopoverElement>;
            "gigya-screen-router": LocalJSX.GigyaScreenRouter & JSXBase.HTMLAttributes<HTMLGigyaScreenRouterElement>;
            "gigya-sdk-store": LocalJSX.GigyaSdkStore & JSXBase.HTMLAttributes<HTMLGigyaSdkStoreElement>;
            "gigya-store": LocalJSX.GigyaStore & JSXBase.HTMLAttributes<HTMLGigyaStoreElement>;
            "loading-machine": LocalJSX.LoadingMachine & JSXBase.HTMLAttributes<HTMLLoadingMachineElement>;
            "pure-base": LocalJSX.PureBase & JSXBase.HTMLAttributes<HTMLPureBaseElement>;
            "pure-button": LocalJSX.PureButton & JSXBase.HTMLAttributes<HTMLPureButtonElement>;
            "router-link": LocalJSX.RouterLink & JSXBase.HTMLAttributes<HTMLRouterLinkElement>;
            "stepper-machine": LocalJSX.StepperMachine & JSXBase.HTMLAttributes<HTMLStepperMachineElement>;
        }
    }
}
